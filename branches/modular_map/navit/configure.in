AC_INIT(navit, 0.0.1)
AM_INIT_AUTOMAKE
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE

AC_PROG_CC
if eval "test x$GCC = xyes"; then
        CFLAGS="$CFLAGS -Wall -Wcast-align -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wpointer-arith -Wreturn-type -D_GNU_SOURCE"
fi

# CFLAGS="$CFLAGS -DG_DISABLE_DEPRECATED -DGDK_DISABLE_DEPRECATED -DGDK_PIXBUF_DISABLE_DEPRECATED -DGTK_DISABLE_DEPRECATED"

AC_ARG_ENABLE(unaligned,
[  --disable-unaligned          avoid unaligned accesses],
USE_UNALIGNED=$enableval, USE_UNALIGNED=yes)
test x"${USE_UNALIGNED}" = xyes && AC_DEFINE(USE_UNALIGNED,[],Define to allow unaligned access)

AC_ARG_ENABLE(float,
[  --disable-float              avoid floating point calculations],
USE_FLOAT=$enableval, USE_FLOAT=yes)
test x"${USE_FLOAT}" = xyes && AC_DEFINE(USE_FLOAT,[],Define to use floating point)

AC_ARG_ENABLE(libgps,
[  --disable-libgps             don't use libgps],
USE_LIBGPS=$enableval, USE_LIBGPS=yes)

pkg_modules="glib-2.0 gtk+-2.0 ORBit-2.0 freetype2"
PKG_CHECK_MODULES(PACKAGE, [$pkg_modules])
AC_SUBST(PACKAGE_CFLAGS)
AC_SUBST(PACKAGE_LIBS)
AC_CHECK_HEADER(libspeechd.h, AC_DEFINE([HAVE_LIBSPEECHD],[],Define to 1 if you have the <libspeechd.h> header file.) LIBS="$LIBS -lspeechd",  AC_MSG_WARN([*** no libspeechd.h -- Speech output disabled]))
if test x"${USE_LIBGPS}" = xyes
then
	AC_CHECK_HEADER(gps.h, AC_DEFINE([HAVE_LIBGPS],[],Define to 1 if you have the <gps.h> header file.) LIBS="$LIBS -lgps",  AC_MSG_WARN([*** no gps.h -- gpsd support disabled]))
fi

if test "$cross_compiling" = no; then
	AC_PATH_PROG(_PATH_PYTHON,[python])
	dnl Libraries and flags for embedded Python.
	dnl FIXME: I wish there was a less icky way to get this.
	if test x"$_PATH_PYTHON" != x ; then
	    AC_MSG_CHECKING(for Python linkage)
	    py_prefix=`$_PATH_PYTHON -c 'import sys; print sys.prefix'`
	    py_ver=`$_PATH_PYTHON -c 'import sys; print sys.version[[:3]]'`
	    py_libdir="${py_prefix}/lib/python${py_ver}"
	    PYTHON_INC="-I${py_prefix}/include/python${py_ver}"
	    py_libs=`grep '^LIBS=' $py_libdir/config/Makefile | sed -e 's/^.*=//'`
	    py_libc=`grep '^LIBC=' $py_libdir/config/Makefile | sed -e 's/^.*=//'`
	    py_libm=`grep '^LIBM=' $py_libdir/config/Makefile | sed -e 's/^.*=//'`
	    py_liblocalmod=`grep '^LOCALMODLIBS=' $py_libdir/config/Makefile | sed -e 's/^.*=//'`
	    py_libbasemod=`grep '^BASEMODLIBS=' $py_libdir/config/Makefile | sed -e 's/^.*=//'`
	    PYTHON_LIB="-L$py_libdir/config $py_libs $py_libc $py_libm -lpython$py_ver $py_liblocalmod $py_libbasemod"
	    PYTHON_LIB=`echo $PYTHON_LIB | sed -e 's/[ \\t]*/ /g'`
	    CFLAGS="$CFLAGS $PYTHON_INC"
	    LIBS="$LIBS $PYTHON_LIB"
	    AC_MSG_RESULT($py_libdir)
	else
	    PYTHON_LIB=""
	    PYTHON_INC=""
	fi
else
	AC_MSG_WARN([*** cross compiling, support for python disabled])
fi
AC_SUBST(PYTHON_LIB)
AC_SUBST(PYTHON_INC)

AC_CONFIG_SUBDIRS(src/fib-1.0)

LIBS="$LIBS -rdynamic"

AC_OUTPUT([
Makefile
src/Makefile
src/data/Makefile
src/data/mg/Makefile
src/data/textfile/Makefile
src/data/garmin_img/Makefile
src/gui/Makefile
src/gui/gtk/Makefile
src/graphics/Makefile
src/graphics/gtk_drawing_area/Makefile
])
